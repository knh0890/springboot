class NormalClass
{
	String title;
	public NormalClass(String title)
	{
		this.title = title;
	}
	void classMethod()
	{
		for (int i = 1; i <= 10; i++)
		{
			System.out.printf("%s]i=%d%n", title, i);
		}
	}
}

class NormalThread extends Thread
{
	public NormalThread() {}
	public NormalThread(String title)
	{
		super(title);
	}
	void threadMethod() throws InterruptedException
	{
		for (int i = 1; i <= 10; i++)
		{
			//10번 반복중 2초씩 block상태로 들어가므로 20초간 반복된다
			System.out.printf("%s]i=%d%n", getName(), i);
			sleep(2000);
		}
	}
	public void run()
	{
		try
		{
			threadMethod();
		} catch (Exception e) {}
	}
}
//종속쓰레드
class DaemonThread extends Thread
{
	public void run()
	{
		
		while(true)
		{
			System.out.printf("[쓰레드명:%s]Jazz가 흘러요~%n", getName());
			try
			{
				sleep(3000);
				System.out.println("3초마다 자동저장!!");
			} catch (InterruptedException e)
			{
				System.out.println("자동저장시 오류발생ㅜㅜ");
			}
		}
	}
}


public class Ex03DaemonThread
{

	public static void main(String[] args)
	{
		NormalClass nt1 = new NormalClass("첫번째 클래스");
		nt1.classMethod();
		new NormalClass("두번째 클래스").classMethod();
		
		NormalThread yt1 = new NormalThread("1st 쓰레드");
		yt1.start();
		
		NormalThread yt2 = new NormalThread();
		yt2.setPriority(Thread.MAX_PRIORITY);
		yt2.start();
		
		DaemonThread dt = new DaemonThread();
		dt.setName("데몬쓰레드");
		dt.setDaemon(true);
		dt.start();
		
		System.out.println("현재 활성화 된 상태의 쓰레드수" + Thread.activeCount());
		System.out.println("현재 실행중인 쓰레드명" + Thread.currentThread().getName());
		System.out.println("메인함수의 우선순위" + Thread.currentThread().getPriority());
		System.out.println("메인함수(Main Thread) 종료");
		
	}

}
